{"version":3,"file":"webgpuTintWASM.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuTintWASM.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAsBzC,gBAAgB;AAChB,MAAM,OAAO,cAAc;IAA3B;QASY,WAAM,GAAQ,IAAI,CAAC;IAsC/B,CAAC;IApCU,KAAK,CAAC,SAAS,CAAC,YAA2B;QAC9C,YAAY,GAAG,YAAY,IAAI,EAAE,CAAC;QAClC,YAAY,GAAG;YACX,GAAG,cAAc,CAAC,oBAAoB;YACtC,GAAG,YAAY;SAClB,CAAC;QAEF,IAAI,YAAY,CAAC,KAAK,EAAE;YACpB,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC;YACjC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,QAAQ,EAAE;YAC9C,IAAI,mBAAmB,EAAE,EAAE;gBACvB,MAAM,KAAK,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACpD;iBAAM;gBACH,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACtC;SACJ;QAED,IAAK,IAAY,CAAC,KAAK,EAAE;YACrB,IAAI,CAAC,MAAM,GAAG,MAAO,IAAY,CAAC,KAAK,CAAC,YAAa,CAAC,QAAQ,CAAC,CAAC;YAChE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,OAAO,OAAO,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;IACrD,CAAC;IAEM,iBAAiB,CAAC,IAAiB;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,cAAc,CAAC,kBAAkB,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;SAClE;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;;AA7CD,yBAAyB;AACD,mCAAoB,GAAiB;IACzD,MAAM,EAAE,8CAA8C;IACtD,QAAQ,EAAE,gDAAgD;CAC7D,CAAC;AAEY,iCAAkB,GAAG,KAAK,CAAC","sourcesContent":["import { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * Options to load the associated Twgsl library\r\n */\r\nexport interface TwgslOptions {\r\n    /**\r\n     * Defines an existing instance of Twgsl (useful in modules who do not access the global instance).\r\n     */\r\n    twgsl?: any;\r\n    /**\r\n     * Defines the URL of the twgsl JS File.\r\n     */\r\n    jsPath?: string;\r\n    /**\r\n     * Defines the URL of the twgsl WASM File.\r\n     */\r\n    wasmPath?: string;\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUTintWASM {\r\n    // Default twgsl options.\r\n    private static readonly _TWgslDefaultOptions: TwgslOptions = {\r\n        jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\r\n        wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\",\r\n    };\r\n\r\n    public static ShowWGSLShaderCode = false;\r\n\r\n    private _twgsl: any = null;\r\n\r\n    public async initTwgsl(twgslOptions?: TwgslOptions): Promise<void> {\r\n        twgslOptions = twgslOptions || {};\r\n        twgslOptions = {\r\n            ...WebGPUTintWASM._TWgslDefaultOptions,\r\n            ...twgslOptions,\r\n        };\r\n\r\n        if (twgslOptions.twgsl) {\r\n            this._twgsl = twgslOptions.twgsl;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\r\n            if (IsWindowObjectExist()) {\r\n                await Tools.LoadScriptAsync(twgslOptions.jsPath);\r\n            } else {\r\n                importScripts(twgslOptions.jsPath);\r\n            }\r\n        }\r\n\r\n        if ((self as any).twgsl) {\r\n            this._twgsl = await (self as any).twgsl(twgslOptions!.wasmPath);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"twgsl is not available.\");\r\n    }\r\n\r\n    public convertSpirV2WGSL(code: Uint32Array): string {\r\n        const ccode = this._twgsl.convertSpirV2WGSL(code);\r\n        if (WebGPUTintWASM.ShowWGSLShaderCode) {\r\n            console.log(ccode);\r\n            console.log(\"***********************************************\");\r\n        }\r\n        return ccode;\r\n    }\r\n}\r\n"]}