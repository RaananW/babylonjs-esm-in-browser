{"version":3,"file":"copyTextureToTexture.fragment.js","sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/copyTextureToTexture.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,kCAAkC,CAAC;AAE1C,MAAM,IAAI,GAAG,iCAAiC,CAAC;AAC/C,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;CAkBd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,+BAA+B,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/helperFunctions\";\n\nconst name = \"copyTextureToTexturePixelShader\";\nconst shader = `uniform float conversion;\runiform sampler2D textureSampler;\rvarying vec2 vUV;\r#include<helperFunctions>\nvoid main(void) \r{\rvec4 color=texture2D(textureSampler,vUV);\r#ifdef DEPTH_TEXTURE\ngl_FragDepth=color.r;\r#else\nif (conversion==1.) {\rcolor=toLinearSpace(color);\r} else if (conversion==2.) {\rcolor=toGammaSpace(color);\r}\rgl_FragColor=color;\r#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const copyTextureToTexturePixelShader = { name, shader };\n"]}