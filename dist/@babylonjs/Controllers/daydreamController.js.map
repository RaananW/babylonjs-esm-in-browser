{"version":3,"file":"daydreamController.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/daydreamController.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAG3C,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,yBAAyB,EAAE,2BAA2B,EAAE,MAAM,yBAAyB,CAAC;AAEjG;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,eAAe;IAgBnD;;;OAGG;IACH,YAAY,SAAc;QACtB,KAAK,CAAC,SAAS,CAAC,CAAC;QACjB,IAAI,CAAC,cAAc,GAAG,yBAAyB,CAAC,QAAQ,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,KAAY,EAAE,UAAyC;QAC7E,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,kBAAkB,CAAC,cAAc,EAAE,kBAAkB,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC,SAAS,EAAE,EAAE;YAClH,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAEtC,IAAI,UAAU,EAAE;gBACZ,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAClC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,mBAAmB,CAAC,SAAiB,EAAE,KAA4B;QACzE,kEAAkE;QAClE,IAAI,SAAS,KAAK,CAAC,EAAE;YACjB,MAAM,UAAU,GAAG,IAAI,CAAC,+BAA+B,CAAC;YACxD,IAAI,UAAU,EAAE;gBACZ,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;aACrC;SACJ;aAAM;YACH,qDAAqD;YACrD,MAAM,CAAC,IAAI,CAAC,uCAAuC,SAAS,EAAE,CAAC,CAAC;SACnE;IACL,CAAC;;AAxDD;;GAEG;AACW,iCAAc,GAAW,4CAA4C,CAAC;AAEpF;;GAEG;AACW,iCAAc,GAAW,iBAAiB,CAAC;AAEzD;;GAEG;AACoB,oCAAiB,GAAW,UAAU,CAAC,CAAC,8BAA8B;AA8CjG,2BAA2B,CAAC,oBAAoB,CAAC,IAAI,CAAC;IAClD,SAAS,EAAE,CAAC,WAAW,EAAE,EAAE;QACvB,OAAO,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IACD,MAAM,EAAE,CAAC,WAAW,EAAE,EAAE;QACpB,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Google Daydream controller\r\n */\r\nexport class DaydreamController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify Daydream Controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = \"Daydream\"; // id is 'Daydream Controller'\r\n\r\n    /**\r\n     * Creates a new DaydreamController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.DAYDREAM;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        // Daydream controller only has 1 GamepadButton (on the trackpad).\r\n        if (buttonIdx === 0) {\r\n            const observable = this.onTriggerStateChangedObservable;\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        } else {\r\n            // If the app or home buttons are ever made available\r\n            Logger.Warn(`Unrecognized Daydream button index: ${buttonIdx}`);\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new DaydreamController(gamepadInfo);\r\n    },\r\n});\r\n"]}