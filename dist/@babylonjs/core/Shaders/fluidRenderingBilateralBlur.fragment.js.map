{"version":3,"file":"fluidRenderingBilateralBlur.fragment.js","sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,IAAI,GAAG,wCAAwC,CAAC;AACtD,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,sCAAsC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"fluidRenderingBilateralBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform int maxFilterSize;\runiform vec2 blurDir;\runiform float projectedParticleConstant;\runiform float depthThreshold;\rvarying vec2 vUV;\rvoid main(void) {\rfloat depth=texture2D(textureSampler,vUV).x;\rif (depth>=1e6 || depth<=0.) {\rglFragColor=vec4(vec3(depth),1.);\rreturn;\r}\rint filterSize=min(maxFilterSize,int(ceil(projectedParticleConstant/depth)));\rfloat sigma=float(filterSize)/3.0;\rfloat two_sigma2=2.0*sigma*sigma;\rfloat sigmaDepth=depthThreshold/3.0;\rfloat two_sigmaDepth2=2.0*sigmaDepth*sigmaDepth;\rfloat sum=0.;\rfloat wsum=0.;\rfloat sumVel=0.;\rfor (int x=-filterSize; x<=filterSize; ++x) {\rvec2 coords=vec2(x);\rvec2 sampleDepthVel=textureLod(textureSampler,vUV+coords*blurDir,0.).rg;\rfloat r=dot(coords,coords);\rfloat w=exp(-r/two_sigma2);\rfloat rDepth=sampleDepthVel.r-depth;\rfloat wd=exp(-rDepth*rDepth/two_sigmaDepth2);\rsum+=sampleDepthVel.r*w*wd;\rsumVel+=sampleDepthVel.g*w*wd;\rwsum+=w*wd;\r}\rglFragColor=vec4(sum/wsum,sumVel/wsum,0.,1.);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingBilateralBlurPixelShader = { name, shader };\n"]}