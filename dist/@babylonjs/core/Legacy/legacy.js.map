{"version":3,"file":"legacy.js","sourceRoot":"","sources":["../../../../lts/core/generated/Legacy/legacy.ts"],"names":[],"mappings":"AAAA,yDAAyD;AACzD,+CAA+C;AAC/C,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,KAAK,WAAW,MAAM,gBAAgB,CAAC;AAE9C;;;;;GAKG;AACH,MAAM,YAAY,GAAG,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AACjH,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;IAC/B,YAAa,CAAC,OAAO,GAAS,YAAa,CAAC,OAAO,IAAI,EAAE,CAAC;IAChE,MAAM,aAAa,GAAS,YAAa,CAAC,OAAO,CAAC;IAClD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;QACtB,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;QAChD,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC3B,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAS,WAAY,CAAC,GAAG,CAAC,CAAC;aACtD;SACJ;KACJ;IACD,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;YACrB,aAAa,CAAC,GAAG,CAAC,GAAS,OAAQ,CAAC,GAAG,CAAC,CAAC;SAC5C;KACJ;CACJ;AACD,cAAc,UAAU,CAAC;AACzB,MAAM,CAAC,MAAM,KAAK,GAAG;IACjB,UAAU,EAAE,OAAO,CAAC,UAAU;IAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;IACtC,aAAa,EAAE,OAAO,CAAC,aAAa;IACpC,cAAc,EAAE,OAAO,CAAC,cAAc;CACzC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable import/no-internal-modules */\nimport * as BABYLON from \"../index\";\nimport * as DebugImport from \"../Debug/index\";\ndeclare let global: any;\n/**\n * Legacy support, defining window.BABYLON (global variable).\n *\n * This is the entry point for the UMD module.\n * The entry point for a future ESM package should be index.ts\n */\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\nif (typeof globalObject !== \"undefined\") {\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\n    const BABYLONGLOBAL = (<any>globalObject).BABYLON;\n    if (!BABYLONGLOBAL.Debug) {\n        BABYLONGLOBAL.Debug = BABYLONGLOBAL.Debug || {};\n        for (const key in DebugImport) {\n            if (!BABYLONGLOBAL.Debug[key]) {\n                BABYLONGLOBAL.Debug[key] = (<any>DebugImport)[key];\n            }\n        }\n    }\n    for (const key in BABYLON) {\n        if (!BABYLONGLOBAL[key]) {\n            BABYLONGLOBAL[key] = (<any>BABYLON)[key];\n        }\n    }\n}\nexport * from \"../index\";\nexport const Debug = {\n    AxesViewer: BABYLON.AxesViewer,\n    BoneAxesViewer: BABYLON.BoneAxesViewer,\n    PhysicsViewer: BABYLON.PhysicsViewer,\n    SkeletonViewer: BABYLON.SkeletonViewer\n};\n"]}