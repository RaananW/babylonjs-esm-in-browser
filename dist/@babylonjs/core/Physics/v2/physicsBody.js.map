{"version":3,"file":"physicsBody.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsBody.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IPhysicsEnginePluginV2, MassProperties } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PhysicsEngine } from \"./physicsEngine\";\r\nimport type { Mesh, TransformNode } from \"../../Meshes\";\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsBody {\r\n    /** @internal */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     *\r\n     */\r\n    public _pluginDataInstances: Array<any> = [];\r\n    private _physicsPlugin: IPhysicsEnginePluginV2;\r\n    /**\r\n     *\r\n     */\r\n    node: TransformNode;\r\n    /**\r\n     *\r\n     * @param scene\r\n     * @returns\r\n     */\r\n    constructor(node: TransformNode, scene: Scene) {\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine() as PhysicsEngine;\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        if (!node.rotationQuaternion) {\r\n            node.rotationQuaternion = Quaternion.FromEulerAngles(node.rotation.x, node.rotation.y, node.rotation.z);\r\n        }\r\n        // instances?\r\n        const m = node as Mesh;\r\n        if (m.hasThinInstances) {\r\n            this._physicsPlugin.initBodyInstances(this, m);\r\n        } else {\r\n            // single instance\r\n            this._physicsPlugin.initBody(this, node.position, node.rotationQuaternion);\r\n        }\r\n        this.node = node;\r\n        physicsEngine.addBody(this);\r\n    }\r\n    /**\r\n     *\r\n     * @param shape\r\n     */\r\n    public setShape(shape: PhysicsShape): void {\r\n        this._physicsPlugin.setShape(this, shape);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getShape(): PhysicsShape | undefined {\r\n        return this._physicsPlugin.getShape(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param group\r\n     */\r\n    public setFilterGroup(group: number): void {\r\n        this._physicsPlugin.setFilterGroup(this, group);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getFilterGroup(): number {\r\n        return this._physicsPlugin.getFilterGroup(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventMask\r\n     */\r\n    public setEventMask(eventMask: number): void {\r\n        this._physicsPlugin.setEventMask(this, eventMask);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getEventMask(): number {\r\n        return this._physicsPlugin.getEventMask(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param massProps\r\n     */\r\n    public setMassProperties(massProps: MassProperties): void {\r\n        this._physicsPlugin.setMassProperties(this, massProps);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getMassProperties(): MassProperties | undefined {\r\n        return this._physicsPlugin.getMassProperties(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param damping\r\n     */\r\n    public setLinearDamping(damping: number): void {\r\n        this._physicsPlugin.setLinearDamping(this, damping);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getLinearDamping(): number {\r\n        return this._physicsPlugin.getLinearDamping(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param damping\r\n     */\r\n    public setAngularDamping(damping: number): void {\r\n        this._physicsPlugin.setAngularDamping(this, damping);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getAngularDamping(): number {\r\n        return this._physicsPlugin.getAngularDamping(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param linVel\r\n     */\r\n    public setLinearVelocity(linVel: Vector3): void {\r\n        this._physicsPlugin.setLinearVelocity(this, linVel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getLinearVelocityToRef(linVel: Vector3): void {\r\n        return this._physicsPlugin.getLinearVelocityToRef(this, linVel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param angVel\r\n     */\r\n    public setAngularVelocity(angVel: Vector3): void {\r\n        this._physicsPlugin.setAngularVelocity(this, angVel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getAngularVelocityToRef(angVel: Vector3): void {\r\n        return this._physicsPlugin.getAngularVelocityToRef(this, angVel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param location\r\n     * @param impulse\r\n     */\r\n    public applyImpulse(location: Vector3, impulse: Vector3): void {\r\n        this._physicsPlugin.applyImpulse(this, location, impulse);\r\n    }\r\n\r\n    public getGeometry(): {} {\r\n        return this._physicsPlugin.getBodyGeometry(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public dispose() {\r\n        this._physicsPlugin.disposeBody(this);\r\n    }\r\n}\r\n"]}