{"version":3,"file":"fluidRenderingParticleDepth.vertex.js","sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/fluidRenderingParticleDepth.vertex.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,IAAI,GAAG,yCAAyC,CAAC;AACvD,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;CAwBd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,uCAAuC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"fluidRenderingParticleDepthVertexShader\";\nconst shader = `attribute vec3 position;\rattribute vec2 offset;\runiform mat4 view;\runiform mat4 projection;\runiform vec2 size;\rvarying vec2 uv;\rvarying vec3 viewPos;\rvarying float sphereRadius;\r#ifdef FLUIDRENDERING_VELOCITY\nattribute vec3 velocity;\rvarying float velocityNorm;\r#endif\nvoid main(void) {\rvec3 cornerPos;\rcornerPos.xy=vec2(offset.x-0.5,offset.y-0.5)*size;\rcornerPos.z=0.0;\rviewPos=(view*vec4(position,1.0)).xyz;\rgl_Position=projection*vec4(viewPos+cornerPos,1.0);\ruv=offset;\rsphereRadius=size.x/2.0;\r#ifdef FLUIDRENDERING_VELOCITY\nvelocityNorm=length(velocity);\r#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingParticleDepthVertexShader = { name, shader };\n"]}