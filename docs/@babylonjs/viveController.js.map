{"version":3,"file":"viveController.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/viveController.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,yBAAyB,EAAE,2BAA2B,EAAE,MAAM,yBAAyB,CAAC;AAGjG;;GAEG;AACH,MAAM,OAAO,cAAe,SAAQ,eAAe;IAU/C;;;OAGG;IACH,YAAY,SAAc;QACtB,KAAK,CAAC,SAAS,CAAC,CAAC;QACjB,IAAI,CAAC,cAAc,GAAG,yBAAyB,CAAC,IAAI,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,KAAY,EAAE,UAAyC;QAC7E,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,cAAc,CAAC,cAAc,EAAE,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC,SAAS,EAAE,EAAE;YAC1G;;;;;;;;;;cAUE;YACF,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACtC,IAAI,UAAU,EAAE;gBACZ,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAClC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,IAAW,kCAAkC;QACzC,OAAO,IAAI,CAAC,kCAAkC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,mCAAmC;QAC1C,OAAO,IAAI,CAAC,kCAAkC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,kCAAkC;QACzC,OAAO,IAAI,CAAC,uCAAuC,CAAC;IACxD,CAAC;IAED;;;;;;;;;OASG;IACO,mBAAmB,CAAC,SAAiB,EAAE,KAA4B;QACzE,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,qCAAqC;QACjE,QAAQ,SAAS,EAAE;YACf,KAAK,CAAC;gBACF,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gBAC/D,OAAO;YACX,KAAK,CAAC,EAAE,gBAAgB;gBACpB,IAAI,IAAI,CAAC,aAAa,EAAE;oBACL,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC;iBAC/F;gBACD,IAAI,CAAC,+BAA+B,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gBACnE,OAAO;YACX,KAAK,CAAC,EAAE,wBAAwB;gBAC5B,IAAI,CAAC,kCAAkC,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gBACtE,OAAO;YACX,KAAK,CAAC;gBACF,IAAI,IAAI,CAAC,aAAa,EAAE;oBACpB,IAAI,YAAY,CAAC,OAAO,EAAE;wBACP,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;qBAC3E;yBAAM;wBACY,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtE;iBACJ;gBACD,IAAI,CAAC,uCAAuC,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gBAC3E,OAAO;SACd;IACL,CAAC;;AAtGD;;GAEG;AACW,6BAAc,GAAW,yCAAyC,CAAC;AACjF;;GAEG;AACW,6BAAc,GAAW,cAAc,CAAC;AAkG1D,2BAA2B,CAAC,oBAAoB,CAAC,IAAI,CAAC;IAClD,SAAS,EAAE,CAAC,WAAW,EAAE,EAAE;QACvB,OAAO,WAAW,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACjE,CAAC;IACD,MAAM,EAAE,CAAC,WAAW,EAAE,EAAE;QACpB,OAAO,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport type { Observable } from \"../../Misc/observable\";\r\n\r\n/**\r\n * Vive Controller\r\n */\r\nexport class ViveController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/vive/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"wand.babylon\";\r\n\r\n    /**\r\n     * Creates a new ViveController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.VIVE;\r\n        this._invertLeftStickY = true;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            /*\r\n            Parent Mesh name: ViveWand\r\n            - body\r\n            - r_gripper\r\n            - l_gripper\r\n            - menu_button\r\n            - system_button\r\n            - trackpad\r\n            - trigger\r\n            - LED\r\n            */\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\r\n    public get onLeftButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\r\n    public get onRightButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\r\n    public get onMenuButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onSecondaryButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * Vive mapping:\r\n     * 0: touchpad\r\n     * 1: trigger\r\n     * 2: left AND right buttons\r\n     * 3: menu button\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[6]).rotation.x = -notifyObject.value * 0.15;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // left AND right button\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new ViveController(gamepadInfo);\r\n    },\r\n});\r\n"]}