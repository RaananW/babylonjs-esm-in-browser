{"version":3,"file":"glowMapMerge.fragment.js","sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/glowMapMerge.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,IAAI,GAAG,yBAAyB,CAAC;AACvC,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;EA0Bb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,uBAAuB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"glowMapMergePixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\r#ifdef EMISSIVE\nuniform sampler2D textureSampler2;\r#endif\nuniform float offset;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\nvec4 baseColor=texture2D(textureSampler,vUV);\r#ifdef EMISSIVE\nbaseColor+=texture2D(textureSampler2,vUV);\rbaseColor*=offset;\r#else\nbaseColor.a=abs(offset-baseColor.a);\r#ifdef STROKE\nfloat alpha=smoothstep(.0,.1,baseColor.a);\rbaseColor.a=alpha;\rbaseColor.rgb=baseColor.rgb*alpha;\r#endif\n#endif\n#if LDR\nbaseColor=clamp(baseColor,0.,1.0);\r#endif\ngl_FragColor=baseColor;\r#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const glowMapMergePixelShader = { name, shader };\n"]}